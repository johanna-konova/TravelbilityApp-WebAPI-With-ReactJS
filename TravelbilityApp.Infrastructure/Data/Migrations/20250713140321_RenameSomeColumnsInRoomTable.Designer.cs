// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TravelbilityApp.Infrastructure.Data;

#nullable disable

namespace TravelbilityApp.Infrastructure.Data.Migrations
{
    [DbContext(typeof(TravelbilityAppDbContext))]
    [Migration("20250713140321_RenameSomeColumnsInRoomTable")]
    partial class RenameSomeColumnsInRoomTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TravelbilityApp.Infrastructure.Data.Models.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("TravelbilityApp.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("TravelbilityApp.Infrastructure.Data.Models.BedType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BedTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "90 cm x 190 cm",
                            Name = "Single Bed"
                        },
                        new
                        {
                            Id = 2,
                            Description = "90 cm x 190 cm each",
                            Name = "Twin Bed"
                        },
                        new
                        {
                            Id = 3,
                            Description = "135 cm x 190 cm",
                            Name = "Double Bed"
                        },
                        new
                        {
                            Id = 4,
                            Description = "150 cm x 200 cm",
                            Name = "Queen Bed"
                        },
                        new
                        {
                            Id = 5,
                            Description = "180 cm x 200 cm",
                            Name = "King Bed"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Size varies",
                            Name = "Sofa Bed"
                        },
                        new
                        {
                            Id = 7,
                            Description = "90 cm x 190 cm each",
                            Name = "Bunk Bed"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Size varies",
                            Name = "Trundle"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Size varies",
                            Name = "Murphy Bed"
                        });
                });

            modelBuilder.Entity("TravelbilityApp.Infrastructure.Data.Models.Facility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsForAccessibility")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WhereStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Facilities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsForAccessibility = true,
                            Name = "Higher level toilet",
                            WhereStatus = 3
                        },
                        new
                        {
                            Id = 2,
                            IsForAccessibility = false,
                            Name = "Airport shuttle",
                            WhereStatus = 2
                        },
                        new
                        {
                            Id = 3,
                            IsForAccessibility = false,
                            Name = "Free Wi-Fi",
                            WhereStatus = 3
                        },
                        new
                        {
                            Id = 4,
                            IsForAccessibility = false,
                            Name = "Pets allowed",
                            WhereStatus = 3
                        },
                        new
                        {
                            Id = 5,
                            IsForAccessibility = true,
                            Name = "Toilet with grab rails",
                            WhereStatus = 3
                        },
                        new
                        {
                            Id = 6,
                            IsForAccessibility = false,
                            Name = "Room service",
                            WhereStatus = 1
                        },
                        new
                        {
                            Id = 7,
                            IsForAccessibility = true,
                            Name = "Wheelchair accessible",
                            WhereStatus = 3
                        },
                        new
                        {
                            Id = 8,
                            IsForAccessibility = true,
                            Name = "Visual aids: Tactile signs",
                            WhereStatus = 3
                        },
                        new
                        {
                            Id = 9,
                            IsForAccessibility = false,
                            Name = "Swimming Pool",
                            WhereStatus = 2
                        },
                        new
                        {
                            Id = 10,
                            IsForAccessibility = true,
                            Name = "Electric vehicle charging station",
                            WhereStatus = 2
                        },
                        new
                        {
                            Id = 11,
                            IsForAccessibility = false,
                            Name = "Family rooms",
                            WhereStatus = 1
                        },
                        new
                        {
                            Id = 12,
                            IsForAccessibility = true,
                            Name = "Visual aids: Braille",
                            WhereStatus = 3
                        },
                        new
                        {
                            Id = 13,
                            IsForAccessibility = true,
                            Name = "Lower bathroom sink",
                            WhereStatus = 3
                        },
                        new
                        {
                            Id = 14,
                            IsForAccessibility = false,
                            Name = "Fitness centre",
                            WhereStatus = 2
                        },
                        new
                        {
                            Id = 15,
                            IsForAccessibility = false,
                            Name = "Non-smoking rooms",
                            WhereStatus = 3
                        },
                        new
                        {
                            Id = 16,
                            IsForAccessibility = true,
                            Name = "Emergency cord in bathroom",
                            WhereStatus = 3
                        },
                        new
                        {
                            Id = 17,
                            IsForAccessibility = false,
                            Name = "Parking",
                            WhereStatus = 2
                        },
                        new
                        {
                            Id = 18,
                            IsForAccessibility = false,
                            Name = "Restaurant",
                            WhereStatus = 2
                        },
                        new
                        {
                            Id = 19,
                            IsForAccessibility = true,
                            Name = "Auditory guidance",
                            WhereStatus = 3
                        },
                        new
                        {
                            Id = 20,
                            IsForAccessibility = false,
                            Name = "Spa and wellness centre",
                            WhereStatus = 2
                        },
                        new
                        {
                            Id = 21,
                            IsForAccessibility = false,
                            Name = "Private bathroom",
                            WhereStatus = 1
                        },
                        new
                        {
                            Id = 22,
                            IsForAccessibility = false,
                            Name = "Sea view",
                            WhereStatus = 1
                        },
                        new
                        {
                            Id = 23,
                            IsForAccessibility = false,
                            Name = "Balcony",
                            WhereStatus = 1
                        },
                        new
                        {
                            Id = 24,
                            IsForAccessibility = false,
                            Name = "Kitchen / kitchenette",
                            WhereStatus = 1
                        },
                        new
                        {
                            Id = 25,
                            IsForAccessibility = false,
                            Name = "Terrace",
                            WhereStatus = 1
                        },
                        new
                        {
                            Id = 26,
                            IsForAccessibility = false,
                            Name = "Coffee / tea maker",
                            WhereStatus = 1
                        },
                        new
                        {
                            Id = 27,
                            IsForAccessibility = false,
                            Name = "Air conditioning",
                            WhereStatus = 1
                        },
                        new
                        {
                            Id = 28,
                            IsForAccessibility = false,
                            Name = "Fireplace",
                            WhereStatus = 1
                        },
                        new
                        {
                            Id = 29,
                            IsForAccessibility = false,
                            Name = "TV",
                            WhereStatus = 1
                        },
                        new
                        {
                            Id = 30,
                            IsForAccessibility = false,
                            Name = "Flat-screen TV",
                            WhereStatus = 1
                        },
                        new
                        {
                            Id = 31,
                            IsForAccessibility = false,
                            Name = "Private pool",
                            WhereStatus = 1
                        },
                        new
                        {
                            Id = 32,
                            IsForAccessibility = false,
                            Name = "Soundproofing",
                            WhereStatus = 1
                        },
                        new
                        {
                            Id = 33,
                            IsForAccessibility = false,
                            Name = "Electric kettle",
                            WhereStatus = 1
                        },
                        new
                        {
                            Id = 34,
                            IsForAccessibility = false,
                            Name = "Rooftop pool",
                            WhereStatus = 2
                        },
                        new
                        {
                            Id = 35,
                            IsForAccessibility = false,
                            Name = "Refrigerator",
                            WhereStatus = 1
                        },
                        new
                        {
                            Id = 36,
                            IsForAccessibility = false,
                            Name = "Patio",
                            WhereStatus = 1
                        },
                        new
                        {
                            Id = 37,
                            IsForAccessibility = false,
                            Name = "Hairdryer",
                            WhereStatus = 1
                        },
                        new
                        {
                            Id = 38,
                            IsForAccessibility = false,
                            Name = "Heating",
                            WhereStatus = 1
                        },
                        new
                        {
                            Id = 39,
                            IsForAccessibility = true,
                            Name = "Upper floors accessible by elevator",
                            WhereStatus = 2
                        },
                        new
                        {
                            Id = 40,
                            IsForAccessibility = true,
                            Name = "Roll-in shower",
                            WhereStatus = 1
                        },
                        new
                        {
                            Id = 41,
                            IsForAccessibility = true,
                            Name = "Shower chair",
                            WhereStatus = 1
                        },
                        new
                        {
                            Id = 42,
                            IsForAccessibility = true,
                            Name = "Accessible Parking",
                            WhereStatus = 2
                        },
                        new
                        {
                            Id = 43,
                            IsForAccessibility = false,
                            Name = "Mini Fridge",
                            WhereStatus = 1
                        });
                });

            modelBuilder.Entity("TravelbilityApp.Infrastructure.Data.Models.Property", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<TimeOnly>("CheckIn")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("CheckOut")
                        .HasColumnType("time");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PropertyTypeId")
                        .HasColumnType("int");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("StarsCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PropertyTypeId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("TravelbilityApp.Infrastructure.Data.Models.PropertyFacility", b =>
                {
                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FacilityId")
                        .HasColumnType("int");

                    b.Property<Guid?>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PropertyId", "FacilityId");

                    b.HasIndex("FacilityId");

                    b.HasIndex("RoomId");

                    b.ToTable("PropertiesFacilities");
                });

            modelBuilder.Entity("TravelbilityApp.Infrastructure.Data.Models.PropertyPhoto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.HasIndex("RoomId");

                    b.ToTable("PropertiesPhotos");
                });

            modelBuilder.Entity("TravelbilityApp.Infrastructure.Data.Models.PropertyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PropertyTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Entire homes & apartments"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Apartments"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Hotels"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Guest houses"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Villas"
                        });
                });

            modelBuilder.Entity("TravelbilityApp.Infrastructure.Data.Models.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("MainBedTypeId")
                        .HasColumnType("int");

                    b.Property<int>("MaxGuest")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfUnits")
                        .HasColumnType("int");

                    b.Property<decimal>("PricePerNight")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RoomTypeId")
                        .HasColumnType("int");

                    b.Property<double>("SizeInSquareMeters")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("MainBedTypeId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("TravelbilityApp.Infrastructure.Data.Models.RoomType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsForAccessibility")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RoomTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsForAccessibility = false,
                            Name = "Single Room"
                        },
                        new
                        {
                            Id = 2,
                            IsForAccessibility = false,
                            Name = "Double Room"
                        },
                        new
                        {
                            Id = 3,
                            IsForAccessibility = false,
                            Name = "Twin Room"
                        },
                        new
                        {
                            Id = 4,
                            IsForAccessibility = false,
                            Name = "Deluxe Room"
                        },
                        new
                        {
                            Id = 5,
                            IsForAccessibility = false,
                            Name = "Family Room"
                        },
                        new
                        {
                            Id = 6,
                            IsForAccessibility = false,
                            Name = "Suite"
                        },
                        new
                        {
                            Id = 7,
                            IsForAccessibility = false,
                            Name = "Studio"
                        },
                        new
                        {
                            Id = 8,
                            IsForAccessibility = true,
                            Name = "Accessible Room"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("TravelbilityApp.Infrastructure.Data.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("TravelbilityApp.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("TravelbilityApp.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("TravelbilityApp.Infrastructure.Data.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelbilityApp.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("TravelbilityApp.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TravelbilityApp.Infrastructure.Data.Models.Property", b =>
                {
                    b.HasOne("TravelbilityApp.Infrastructure.Data.Models.PropertyType", "PropertyType")
                        .WithMany()
                        .HasForeignKey("PropertyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelbilityApp.Infrastructure.Data.Models.ApplicationUser", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PropertyType");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("TravelbilityApp.Infrastructure.Data.Models.PropertyFacility", b =>
                {
                    b.HasOne("TravelbilityApp.Infrastructure.Data.Models.Facility", "Facility")
                        .WithMany()
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelbilityApp.Infrastructure.Data.Models.Property", "Property")
                        .WithMany("Facilities")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelbilityApp.Infrastructure.Data.Models.Room", "Room")
                        .WithMany("Facilities")
                        .HasForeignKey("RoomId");

                    b.Navigation("Facility");

                    b.Navigation("Property");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("TravelbilityApp.Infrastructure.Data.Models.PropertyPhoto", b =>
                {
                    b.HasOne("TravelbilityApp.Infrastructure.Data.Models.Property", "Property")
                        .WithMany("Photos")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelbilityApp.Infrastructure.Data.Models.Room", "Room")
                        .WithMany("Photos")
                        .HasForeignKey("RoomId");

                    b.Navigation("Property");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("TravelbilityApp.Infrastructure.Data.Models.Room", b =>
                {
                    b.HasOne("TravelbilityApp.Infrastructure.Data.Models.BedType", "MainBedType")
                        .WithMany()
                        .HasForeignKey("MainBedTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelbilityApp.Infrastructure.Data.Models.Property", "Property")
                        .WithMany("Rooms")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelbilityApp.Infrastructure.Data.Models.RoomType", "RoomType")
                        .WithMany()
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MainBedType");

                    b.Navigation("Property");

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("TravelbilityApp.Infrastructure.Data.Models.Property", b =>
                {
                    b.Navigation("Facilities");

                    b.Navigation("Photos");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("TravelbilityApp.Infrastructure.Data.Models.Room", b =>
                {
                    b.Navigation("Facilities");

                    b.Navigation("Photos");
                });
#pragma warning restore 612, 618
        }
    }
}
