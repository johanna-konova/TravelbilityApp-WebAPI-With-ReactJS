// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TravelbilityApp.Infrastructure.Data;

#nullable disable

namespace TravelbilityApp.Infrastructure.Data.Migrations
{
    [DbContext(typeof(TravelbilityAppDbContext))]
    [Migration("20250731123455_SeedRoomsTable")]
    partial class SeedRoomsTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TravelbilityApp.Infrastructure.Data.Models.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("TravelbilityApp.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-7890-ab12-c3de4f567890"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7f3fbb67-83a1-4c8a-9376-77d5bc93e96e",
                            Email = "peter@abv.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "PETER@ABV.COM",
                            NormalizedUserName = "PETER@ABV.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKVx91uWOkjZzGCxXb1RJuKJDHVqLCuPN8WlMefopl3z9zCdkbHsD3KbsetZAXzDLg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "XKYK5BIDWLG3ED57QZYQHRLUZMMUVYWS",
                            TwoFactorEnabled = false,
                            UserName = "peter@abv.com"
                        },
                        new
                        {
                            Id = new Guid("f7e8d9a0-b1c2-34d5-6789-f01ab2c345de"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5d4fdb87-23b1-4da2-9e3e-a8b4df7a283f",
                            Email = "george@abv.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "GEORGE@ABV.COM",
                            NormalizedUserName = "GEORGE@ABV.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBsn1zTpRKY2zsgaVQ0BhEpmM0j2H4sv6+HqFlfeKmJgF8++XVw2FZwAkJQBWL2Yqw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "JTHY3GADWFA4KD67TFYUIUQNLJMNXYAS",
                            TwoFactorEnabled = false,
                            UserName = "george@abv.com"
                        });
                });

            modelBuilder.Entity("TravelbilityApp.Infrastructure.Data.Models.BedType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BedTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "90 cm x 190 cm",
                            Name = "Single Bed"
                        },
                        new
                        {
                            Id = 2,
                            Description = "90 cm x 190 cm each",
                            Name = "Twin Bed"
                        },
                        new
                        {
                            Id = 3,
                            Description = "135 cm x 190 cm",
                            Name = "Double Bed"
                        },
                        new
                        {
                            Id = 4,
                            Description = "150 cm x 200 cm",
                            Name = "Queen Bed"
                        },
                        new
                        {
                            Id = 5,
                            Description = "180 cm x 200 cm",
                            Name = "King Bed"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Size varies",
                            Name = "Sofa Bed"
                        },
                        new
                        {
                            Id = 7,
                            Description = "90 cm x 190 cm each",
                            Name = "Bunk Bed"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Size varies",
                            Name = "Trundle"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Size varies",
                            Name = "Murphy Bed"
                        });
                });

            modelBuilder.Entity("TravelbilityApp.Infrastructure.Data.Models.Facility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsForAccessibility")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WhereStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Facilities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsForAccessibility = true,
                            Name = "Higher level toilet",
                            WhereStatus = 3
                        },
                        new
                        {
                            Id = 2,
                            IsForAccessibility = false,
                            Name = "Airport shuttle",
                            WhereStatus = 2
                        },
                        new
                        {
                            Id = 3,
                            IsForAccessibility = false,
                            Name = "Free Wi-Fi",
                            WhereStatus = 3
                        },
                        new
                        {
                            Id = 4,
                            IsForAccessibility = false,
                            Name = "Pets allowed",
                            WhereStatus = 3
                        },
                        new
                        {
                            Id = 5,
                            IsForAccessibility = true,
                            Name = "Toilet with grab rails",
                            WhereStatus = 3
                        },
                        new
                        {
                            Id = 6,
                            IsForAccessibility = false,
                            Name = "Room service",
                            WhereStatus = 1
                        },
                        new
                        {
                            Id = 7,
                            IsForAccessibility = true,
                            Name = "Wheelchair accessible",
                            WhereStatus = 3
                        },
                        new
                        {
                            Id = 8,
                            IsForAccessibility = true,
                            Name = "Visual aids: Tactile signs",
                            WhereStatus = 3
                        },
                        new
                        {
                            Id = 9,
                            IsForAccessibility = false,
                            Name = "Swimming Pool",
                            WhereStatus = 2
                        },
                        new
                        {
                            Id = 10,
                            IsForAccessibility = true,
                            Name = "Electric vehicle charging station",
                            WhereStatus = 2
                        },
                        new
                        {
                            Id = 11,
                            IsForAccessibility = false,
                            Name = "Family rooms",
                            WhereStatus = 1
                        },
                        new
                        {
                            Id = 12,
                            IsForAccessibility = true,
                            Name = "Visual aids: Braille",
                            WhereStatus = 3
                        },
                        new
                        {
                            Id = 13,
                            IsForAccessibility = true,
                            Name = "Lower bathroom sink",
                            WhereStatus = 3
                        },
                        new
                        {
                            Id = 14,
                            IsForAccessibility = false,
                            Name = "Fitness centre",
                            WhereStatus = 2
                        },
                        new
                        {
                            Id = 15,
                            IsForAccessibility = false,
                            Name = "Non-smoking rooms",
                            WhereStatus = 3
                        },
                        new
                        {
                            Id = 16,
                            IsForAccessibility = true,
                            Name = "Emergency cord in bathroom",
                            WhereStatus = 3
                        },
                        new
                        {
                            Id = 17,
                            IsForAccessibility = false,
                            Name = "Parking",
                            WhereStatus = 2
                        },
                        new
                        {
                            Id = 18,
                            IsForAccessibility = false,
                            Name = "Restaurant",
                            WhereStatus = 2
                        },
                        new
                        {
                            Id = 19,
                            IsForAccessibility = true,
                            Name = "Auditory guidance",
                            WhereStatus = 3
                        },
                        new
                        {
                            Id = 20,
                            IsForAccessibility = false,
                            Name = "Spa and wellness centre",
                            WhereStatus = 2
                        },
                        new
                        {
                            Id = 21,
                            IsForAccessibility = false,
                            Name = "Private bathroom",
                            WhereStatus = 1
                        },
                        new
                        {
                            Id = 22,
                            IsForAccessibility = false,
                            Name = "Sea view",
                            WhereStatus = 1
                        },
                        new
                        {
                            Id = 23,
                            IsForAccessibility = false,
                            Name = "Balcony",
                            WhereStatus = 1
                        },
                        new
                        {
                            Id = 24,
                            IsForAccessibility = false,
                            Name = "Kitchen / kitchenette",
                            WhereStatus = 1
                        },
                        new
                        {
                            Id = 25,
                            IsForAccessibility = false,
                            Name = "Terrace",
                            WhereStatus = 1
                        },
                        new
                        {
                            Id = 26,
                            IsForAccessibility = false,
                            Name = "Coffee / tea maker",
                            WhereStatus = 1
                        },
                        new
                        {
                            Id = 27,
                            IsForAccessibility = false,
                            Name = "Air conditioning",
                            WhereStatus = 1
                        },
                        new
                        {
                            Id = 28,
                            IsForAccessibility = false,
                            Name = "Fireplace",
                            WhereStatus = 1
                        },
                        new
                        {
                            Id = 29,
                            IsForAccessibility = false,
                            Name = "TV",
                            WhereStatus = 1
                        },
                        new
                        {
                            Id = 30,
                            IsForAccessibility = false,
                            Name = "Flat-screen TV",
                            WhereStatus = 1
                        },
                        new
                        {
                            Id = 31,
                            IsForAccessibility = false,
                            Name = "Private pool",
                            WhereStatus = 1
                        },
                        new
                        {
                            Id = 32,
                            IsForAccessibility = false,
                            Name = "Soundproofing",
                            WhereStatus = 1
                        },
                        new
                        {
                            Id = 33,
                            IsForAccessibility = false,
                            Name = "Electric kettle",
                            WhereStatus = 1
                        },
                        new
                        {
                            Id = 34,
                            IsForAccessibility = false,
                            Name = "Rooftop pool",
                            WhereStatus = 2
                        },
                        new
                        {
                            Id = 35,
                            IsForAccessibility = false,
                            Name = "Refrigerator",
                            WhereStatus = 1
                        },
                        new
                        {
                            Id = 36,
                            IsForAccessibility = false,
                            Name = "Patio",
                            WhereStatus = 1
                        },
                        new
                        {
                            Id = 37,
                            IsForAccessibility = false,
                            Name = "Hairdryer",
                            WhereStatus = 1
                        },
                        new
                        {
                            Id = 38,
                            IsForAccessibility = false,
                            Name = "Heating",
                            WhereStatus = 1
                        },
                        new
                        {
                            Id = 39,
                            IsForAccessibility = true,
                            Name = "Upper floors accessible by elevator",
                            WhereStatus = 2
                        },
                        new
                        {
                            Id = 40,
                            IsForAccessibility = true,
                            Name = "Roll-in shower",
                            WhereStatus = 1
                        },
                        new
                        {
                            Id = 41,
                            IsForAccessibility = true,
                            Name = "Shower chair",
                            WhereStatus = 1
                        },
                        new
                        {
                            Id = 42,
                            IsForAccessibility = true,
                            Name = "Accessible Parking",
                            WhereStatus = 2
                        },
                        new
                        {
                            Id = 43,
                            IsForAccessibility = false,
                            Name = "Mini Fridge",
                            WhereStatus = 1
                        });
                });

            modelBuilder.Entity("TravelbilityApp.Infrastructure.Data.Models.Property", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<TimeOnly>("CheckIn")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("CheckOut")
                        .HasColumnType("time");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PropertyTypeId")
                        .HasColumnType("int");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("StarsCount")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PropertyTypeId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Properties");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bae99276-1865-4c63-899c-093d3b85f014"),
                            Address = "Palm Jumeirah, Palm Jumeirah, Dubai, United Arab Emirates",
                            CheckIn = new TimeOnly(15, 0, 0),
                            CheckOut = new TimeOnly(6, 0, 0),
                            CreatedAt = new DateTime(2025, 7, 31, 12, 34, 54, 470, DateTimeKind.Utc).AddTicks(6787),
                            Description = "FIVE Palm Jumeirah Dubai features its own private beach as well as 5 outdoor swimming pools, including a 180 ft long option, running through the heart of the resort. Guests can enjoy free WiFi throughout the property.\r\n\r\nThe hotel has 470 guest rooms and suites, spread across 16 floors, decorated in a simple yet elegant style with views of the Arabian Gulf.\r\n\r\nThe resort has an array of facilities, including dining venues hosted by world-class chefs, a modern spa and a karaoke room at Maiden Shanghai.\r\n\r\nA landmark on the trunk of the iconic Palm Jumeirah, FIVE Palm Jumeirah Dubai is strategically located for convenient access to Dubai’s business districts, as well as the city’s many exciting tourist and entertainment attractions.\r\n\r\nThe resort is also accessible from Dubai International Airport (DXB), which is 20 mi away and Al Maktoum International Airport (DWC), which 26 mi away. Mall of Emirates is 7 mi away, while Dubai Mall is 14 mi from the property.",
                            Name = "FIVE Palm Jumeirah Dubai",
                            PropertyTypeId = 3,
                            PublisherId = new Guid("a1b2c3d4-e5f6-7890-ab12-c3de4f567890"),
                            StarsCount = 5,
                            Status = 3,
                            UpdatedAt = new DateTime(2025, 7, 31, 12, 34, 54, 470, DateTimeKind.Utc).AddTicks(6895)
                        },
                        new
                        {
                            Id = new Guid("bcb4f072-ecca-43c9-ab26-c060c6f364e4"),
                            Address = "Barbaros Hayrettin Pasa Mah. 1999 Sok. Esenyurt, 34522 Istanbul, Turkey",
                            CheckIn = new TimeOnly(14, 0, 0),
                            CheckOut = new TimeOnly(0, 0, 0),
                            CreatedAt = new DateTime(2025, 7, 31, 12, 34, 54, 470, DateTimeKind.Utc).AddTicks(7159),
                            Description = "Located in business area in Beylikduzu, 1 km from Tuyap Convention Centre, Hilton Garden Inn Istanbul Beylikduzu features indoor pool and 24/7 fitness centre. Free WiFi access is available in all areas.\n\nModern rooms are fitted with a flat-screen TV. Some units include a seating area for your convenience. Every room comes with a private bathroom. For your comfort, you will find free toiletries and a hair dryer.\n\nThere is a 24-hour front desk, providing room service at the property. Laundry, dry cleaning and ironing services are also provided upon request at an additional charge.\n\nGuests can enjoy their meals at the on-site restaurant. The lobby bar is ideal for having a drink and relaxing after a busy day.\n\nThe hotel is 35 km from Istanbul’s historic centre, where guests can visit Topkapi Palace, Blue Mosque, and Hagia Sophia Museum. Istanbul Airport is a 50-minute drive away.",
                            Name = "Hilton Garden Inn Istanbul Beylikduzu",
                            PropertyTypeId = 1,
                            PublisherId = new Guid("a1b2c3d4-e5f6-7890-ab12-c3de4f567890"),
                            StarsCount = 4,
                            Status = 2,
                            UpdatedAt = new DateTime(2025, 7, 31, 12, 34, 54, 470, DateTimeKind.Utc).AddTicks(7160)
                        },
                        new
                        {
                            Id = new Guid("b9ec059b-5951-4d13-9fd1-ede0802dc76e"),
                            Address = "Boduthakurufaanu Magu, 20006 Male City, Maldives",
                            CheckIn = new TimeOnly(14, 0, 0),
                            CheckOut = new TimeOnly(12, 0, 0),
                            CreatedAt = new DateTime(2025, 7, 31, 12, 34, 54, 470, DateTimeKind.Utc).AddTicks(7177),
                            Description = "Beachfront Location: Summer Beach Maldives in Male City offers direct beachfront access with stunning sea views. Guests enjoy a terrace and outdoor seating area, perfect for relaxation.\r\n\r\nComfortable Accommodations: Rooms feature air-conditioning, private bathrooms, and modern amenities such as free WiFi, mini-bars, and flat-screen TVs. Family rooms and interconnected rooms cater to all travelers.\r\n\r\nDining Experience: The family-friendly restaurant serves Indian, Italian, Thai, and international cuisines, including vegetarian and halal options. Breakfast includes local specialties, fresh pastries, and a variety of beverages.\r\n\r\nConvenient Services: The guest house provides a free airport shuttle service, 24-hour front desk, concierge, and tour desk. Additional amenities include a coffee shop, child-friendly buffet, and free WiFi throughout the property.",
                            Name = "Summer Beach Maldives",
                            PropertyTypeId = 5,
                            PublisherId = new Guid("f7e8d9a0-b1c2-34d5-6789-f01ab2c345de"),
                            StarsCount = 4,
                            Status = 3,
                            UpdatedAt = new DateTime(2025, 7, 31, 12, 34, 54, 470, DateTimeKind.Utc).AddTicks(7178)
                        });
                });

            modelBuilder.Entity("TravelbilityApp.Infrastructure.Data.Models.PropertyFacility", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FacilityId")
                        .HasColumnType("int");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FacilityId");

                    b.HasIndex("RoomId");

                    b.HasIndex("PropertyId", "FacilityId", "RoomId")
                        .IsUnique()
                        .HasFilter("[RoomId] IS NOT NULL");

                    b.ToTable("PropertiesFacilities");
                });

            modelBuilder.Entity("TravelbilityApp.Infrastructure.Data.Models.PropertyPhoto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.HasIndex("RoomId");

                    b.ToTable("PropertiesPhotos");
                });

            modelBuilder.Entity("TravelbilityApp.Infrastructure.Data.Models.PropertyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PropertyTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Entire homes & apartments"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Apartments"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Hotels"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Guest houses"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Villas"
                        });
                });

            modelBuilder.Entity("TravelbilityApp.Infrastructure.Data.Models.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MainBedTypeId")
                        .HasColumnType("int");

                    b.Property<int>("MaxGuests")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfUnits")
                        .HasColumnType("int");

                    b.Property<decimal>("PricePerNight")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RoomTypeId")
                        .HasColumnType("int");

                    b.Property<double>("SizeInSquareMeters")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("MainBedTypeId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("135ea1ed-239f-437b-8ec7-9035dbb7f5b3"),
                            Description = "Featuring a private balcony and seating, this air conditioned room offers a large double bed, a 55 inch smart TV.",
                            IsDeleted = false,
                            MainBedTypeId = 3,
                            MaxGuests = 4,
                            NumberOfUnits = 3,
                            PricePerNight = 129.99m,
                            PropertyId = new Guid("bae99276-1865-4c63-899c-093d3b85f014"),
                            RoomTypeId = 8,
                            SizeInSquareMeters = 25.0
                        },
                        new
                        {
                            Id = new Guid("e961fee4-03ab-4d12-a1cb-d25849b9a1c8"),
                            Description = "This spacious suite is consisted of of 1 bedroom, a seating area and 1 bathroom with a walk-in shower and a bath. The air-conditioned suite offers a flat-screen TV with streaming services, soundproof walls, a mini-bar, a tea and coffee maker as well as city views. The unit offers 1 bed.",
                            IsDeleted = false,
                            MainBedTypeId = 5,
                            MaxGuests = 2,
                            NumberOfUnits = 11,
                            PricePerNight = 357m,
                            PropertyId = new Guid("bae99276-1865-4c63-899c-093d3b85f014"),
                            RoomTypeId = 6,
                            SizeInSquareMeters = 55.0
                        },
                        new
                        {
                            Id = new Guid("534ed86f-6b26-4b46-8070-5be3770199f9"),
                            Description = "The double room offers air conditioning, a tea and coffee maker, a safe deposit box, heating and a flat-screen TV. The unit offers 2 beds.",
                            IsDeleted = false,
                            MainBedTypeId = 2,
                            MaxGuests = 2,
                            NumberOfUnits = 7,
                            PricePerNight = 109.98m,
                            PropertyId = new Guid("bcb4f072-ecca-43c9-ab26-c060c6f364e4"),
                            RoomTypeId = 3,
                            SizeInSquareMeters = 39.0
                        },
                        new
                        {
                            Id = new Guid("141e8179-d711-4dec-8ec6-7ec29d47b2b2"),
                            Description = "The air-conditioned suite features 2 bedrooms and 2 bathrooms with a bath and a shower. Featuring a balcony with sea views, this suite also provides a mini-bar and a flat-screen TV with cable channels. The unit offers 2 beds.",
                            IsDeleted = false,
                            MainBedTypeId = 3,
                            MaxGuests = 3,
                            NumberOfUnits = 5,
                            PricePerNight = 197m,
                            PropertyId = new Guid("b9ec059b-5951-4d13-9fd1-ede0802dc76e"),
                            RoomTypeId = 8,
                            SizeInSquareMeters = 43.0
                        });
                });

            modelBuilder.Entity("TravelbilityApp.Infrastructure.Data.Models.RoomType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsForAccessibility")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RoomTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsForAccessibility = false,
                            Name = "Single Room"
                        },
                        new
                        {
                            Id = 2,
                            IsForAccessibility = false,
                            Name = "Double Room"
                        },
                        new
                        {
                            Id = 3,
                            IsForAccessibility = false,
                            Name = "Twin Room"
                        },
                        new
                        {
                            Id = 4,
                            IsForAccessibility = false,
                            Name = "Deluxe Room"
                        },
                        new
                        {
                            Id = 5,
                            IsForAccessibility = false,
                            Name = "Family Room"
                        },
                        new
                        {
                            Id = 6,
                            IsForAccessibility = false,
                            Name = "Suite"
                        },
                        new
                        {
                            Id = 7,
                            IsForAccessibility = false,
                            Name = "Studio"
                        },
                        new
                        {
                            Id = 8,
                            IsForAccessibility = true,
                            Name = "Accessible Room"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("TravelbilityApp.Infrastructure.Data.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("TravelbilityApp.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("TravelbilityApp.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("TravelbilityApp.Infrastructure.Data.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelbilityApp.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("TravelbilityApp.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TravelbilityApp.Infrastructure.Data.Models.Property", b =>
                {
                    b.HasOne("TravelbilityApp.Infrastructure.Data.Models.PropertyType", "PropertyType")
                        .WithMany()
                        .HasForeignKey("PropertyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelbilityApp.Infrastructure.Data.Models.ApplicationUser", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PropertyType");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("TravelbilityApp.Infrastructure.Data.Models.PropertyFacility", b =>
                {
                    b.HasOne("TravelbilityApp.Infrastructure.Data.Models.Facility", "Facility")
                        .WithMany()
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelbilityApp.Infrastructure.Data.Models.Property", "Property")
                        .WithMany("Facilities")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelbilityApp.Infrastructure.Data.Models.Room", "Room")
                        .WithMany("Facilities")
                        .HasForeignKey("RoomId");

                    b.Navigation("Facility");

                    b.Navigation("Property");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("TravelbilityApp.Infrastructure.Data.Models.PropertyPhoto", b =>
                {
                    b.HasOne("TravelbilityApp.Infrastructure.Data.Models.Property", "Property")
                        .WithMany("Photos")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelbilityApp.Infrastructure.Data.Models.Room", "Room")
                        .WithMany("Photos")
                        .HasForeignKey("RoomId");

                    b.Navigation("Property");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("TravelbilityApp.Infrastructure.Data.Models.Room", b =>
                {
                    b.HasOne("TravelbilityApp.Infrastructure.Data.Models.BedType", "MainBedType")
                        .WithMany()
                        .HasForeignKey("MainBedTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelbilityApp.Infrastructure.Data.Models.Property", "Property")
                        .WithMany("Rooms")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelbilityApp.Infrastructure.Data.Models.RoomType", "RoomType")
                        .WithMany()
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MainBedType");

                    b.Navigation("Property");

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("TravelbilityApp.Infrastructure.Data.Models.Property", b =>
                {
                    b.Navigation("Facilities");

                    b.Navigation("Photos");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("TravelbilityApp.Infrastructure.Data.Models.Room", b =>
                {
                    b.Navigation("Facilities");

                    b.Navigation("Photos");
                });
#pragma warning restore 612, 618
        }
    }
}
